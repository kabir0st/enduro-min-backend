# Generated by Django 4.2.5 on 2024-02-27 11:10

import ckeditor.fields
import core.utils.functions
import core.utils.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Addon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', ckeditor.fields.RichTextField(default='')),
                ('nepali_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('saarc_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('international_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('is_included_by_default', models.BooleanField(default=False)),
                ('is_package', models.BooleanField(default=False)),
                ('can_ignore_category_price', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AddOnCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='AddonTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', ckeditor.fields.RichTextField(default='')),
                ('nepali_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('saarc_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('international_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('is_included_by_default', models.BooleanField(default=False)),
                ('is_package', models.BooleanField(default=False)),
                ('can_ignore_category_price', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', ckeditor.fields.RichTextField(blank=True, default='')),
                ('extra_requirements', models.TextField(blank=True, default='')),
                ('actual_distance', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('elevation_gain', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('elevation_lost', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('highest_altitude', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('number_of_checkpoints', models.PositiveBigIntegerField(default=0)),
                ('cut_off_description', models.TextField(blank=True, default='')),
                ('is_ticket_limited', models.BooleanField(default=False)),
                ('ticket_limit', models.PositiveIntegerField(default=1)),
                ('nepali_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('saarc_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('international_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('winning_conditions', ckeditor.fields.RichTextField(blank=True, default='')),
                ('bib_prefix', models.CharField(blank=True, max_length=255, null=True)),
                ('headline_image', models.FileField(blank=True, null=True, upload_to=core.utils.functions.generate_upload_location, validators=[core.utils.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif'])])),
                ('gpx_file', models.FileField(blank=True, null=True, upload_to=core.utils.functions.generate_upload_location)),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CategoryTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', ckeditor.fields.RichTextField(blank=True, default='')),
                ('extra_requirements', models.TextField(blank=True, default='')),
                ('actual_distance', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('elevation_gain', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('elevation_lost', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('highest_altitude', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('number_of_checkpoints', models.PositiveBigIntegerField(default=0)),
                ('cut_off_description', models.TextField(blank=True, default='')),
                ('is_ticket_limited', models.BooleanField(default=False)),
                ('ticket_limit', models.PositiveIntegerField(default=1)),
                ('nepali_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('saarc_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('international_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('winning_conditions', ckeditor.fields.RichTextField(blank=True, default='')),
                ('bib_prefix', models.CharField(blank=True, max_length=255, null=True)),
                ('headline_image', models.FileField(blank=True, null=True, upload_to=core.utils.functions.generate_upload_location, validators=[core.utils.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif'])])),
                ('gpx_file', models.FileField(blank=True, null=True, upload_to=core.utils.functions.generate_upload_location)),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('description', ckeditor.fields.RichTextField(default='')),
                ('general_area', models.TextField(default='')),
                ('starts_from_location', models.TextField(default='')),
                ('ends_at_location', models.TextField(default='')),
                ('course_profile', models.CharField(max_length=255)),
                ('things_required_to_bring', ckeditor.fields.RichTextField(default='')),
                ('things_recommended_to_bring', ckeditor.fields.RichTextField(default='')),
                ('legal_fine_print', ckeditor.fields.RichTextField(default='')),
                ('headline_image', models.FileField(blank=True, null=True, upload_to=core.utils.functions.generate_upload_location, validators=[core.utils.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif'])])),
                ('header_route_image', models.FileField(blank=True, null=True, upload_to=core.utils.functions.generate_upload_location, validators=[core.utils.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif'])])),
                ('logo', models.FileField(blank=True, null=True, upload_to=core.utils.functions.generate_upload_location, validators=[core.utils.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif'])])),
                ('gpx_file', models.FileField(blank=True, null=True, upload_to=core.utils.functions.generate_upload_location)),
                ('prize_description', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('accepted_indexes', models.JSONField(default=core.utils.functions.default_array)),
                ('start_datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('open_registration_from', models.DateTimeField(default=django.utils.timezone.now)),
                ('close_registration_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('close_registration_forcefully', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, default='')),
                ('slug', models.SlugField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('description', ckeditor.fields.RichTextField(default='')),
                ('general_area', models.TextField(default='')),
                ('starts_from_location', models.TextField(default='')),
                ('ends_at_location', models.TextField(default='')),
                ('course_profile', models.CharField(max_length=255)),
                ('things_required_to_bring', ckeditor.fields.RichTextField(default='')),
                ('things_recommended_to_bring', ckeditor.fields.RichTextField(default='')),
                ('legal_fine_print', ckeditor.fields.RichTextField(default='')),
                ('headline_image', models.FileField(blank=True, null=True, upload_to=core.utils.functions.generate_upload_location, validators=[core.utils.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif'])])),
                ('header_route_image', models.FileField(blank=True, null=True, upload_to=core.utils.functions.generate_upload_location, validators=[core.utils.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif'])])),
                ('logo', models.FileField(blank=True, null=True, upload_to=core.utils.functions.generate_upload_location, validators=[core.utils.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif'])])),
                ('gpx_file', models.FileField(blank=True, null=True, upload_to=core.utils.functions.generate_upload_location)),
                ('prize_description', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('accepted_indexes', models.JSONField(default=core.utils.functions.default_array)),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, default='')),
                ('slug', models.SlugField(blank=True, max_length=255)),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.TextField(default='')),
                ('answer', models.TextField(default='')),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FAQTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.TextField(default='')),
                ('answer', models.TextField(default='')),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaForAddon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('src', models.FileField(upload_to=core.utils.functions.generate_upload_location, validators=[core.utils.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif'])])),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaForAddonTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('src', models.FileField(upload_to=core.utils.functions.generate_upload_location, validators=[core.utils.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif'])])),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaForCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('src', models.FileField(upload_to=core.utils.functions.generate_upload_location, validators=[core.utils.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif'])])),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaForCategoryTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('src', models.FileField(upload_to=core.utils.functions.generate_upload_location, validators=[core.utils.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif'])])),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaForEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('src', models.FileField(upload_to=core.utils.functions.generate_upload_location, validators=[core.utils.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif'])])),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaForEventTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('src', models.FileField(upload_to=core.utils.functions.generate_upload_location, validators=[core.utils.models.validate_image_size, django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif'])])),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Prize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('open', 'Open')], default='open', max_length=6)),
                ('rank', models.PositiveIntegerField(default=1)),
                ('prize', models.TextField(blank=True, default='')),
            ],
        ),
        migrations.CreateModel(
            name='PrizeTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('open', 'Open')], default='open', max_length=6)),
                ('rank', models.PositiveIntegerField(default=1)),
                ('prize', models.TextField(blank=True, default='')),
            ],
        ),
        migrations.CreateModel(
            name='ResultEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('open', 'Open')], default='open', max_length=6)),
                ('dob', models.DateField(blank=True, null=True)),
                ('nationality', models.CharField(blank=True, max_length=30, null=True)),
                ('itra_id', models.CharField(blank=True, max_length=255, null=True)),
                ('bib_number', models.CharField(blank=True, max_length=255, null=True)),
                ('team', models.CharField(blank=True, max_length=255, null=True)),
                ('interval_unix_time', models.PositiveBigIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ScheduleTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(default='', max_length=255)),
                ('description', ckeditor.fields.RichTextField()),
                ('schedule_json', models.JSONField(default=core.utils.functions.default_array)),
                ('distance_covered', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('elevation_gained', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('elevation_lost', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('maximum_elevation', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('checkpoints', models.PositiveIntegerField(default=0)),
                ('headline', models.FileField(null=True, upload_to=core.utils.functions.generate_upload_location)),
                ('gpx_file', models.FileField(null=True, upload_to=core.utils.functions.generate_upload_location)),
                ('date', models.DateField()),
                ('event_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='template_schedules', to='events.eventtemplate')),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(default='', max_length=255)),
                ('description', ckeditor.fields.RichTextField()),
                ('schedule_json', models.JSONField(default=core.utils.functions.default_array)),
                ('distance_covered', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('elevation_gained', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('elevation_lost', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('maximum_elevation', models.DecimalField(decimal_places=2, default=0.0, max_digits=60)),
                ('checkpoints', models.PositiveIntegerField(default=0)),
                ('headline', models.FileField(null=True, upload_to=core.utils.functions.generate_upload_location)),
                ('gpx_file', models.FileField(null=True, upload_to=core.utils.functions.generate_upload_location)),
                ('date', models.DateField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='events.event')),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResultList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('open', 'Open')], default='open', max_length=6)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='events.category')),
            ],
            options={
                'ordering': ['-is_active', '-id'],
                'abstract': False,
            },
        ),
    ]
